%%%%% 1.1
% Define the system transfer function
R0 = 0.5; 
numerator = 1;
denominator = [1, -R0];

% Create a system object
sys = tf(numerator, denominator, 1);

% Plot the pole-zero plot
pzmap(sys);
grid on

%%%%% 1.2
% Parameters
R0 = 2.5; % Change this value as needed
n = 20;  % Number of days

% Initialize an array to store the number of newly infected people
new_infections = zeros(1, n);

% Initial condition (one infected person on day 0)
new_infections(1) = 1;

% Calculate the number of newly infected people for each day
for day = 2:n
    new_infections(day) = R0 * new_infections(day - 1);
end

% Plot the number of newly infected people over time
figure;
plot(0:n-1, new_infections, 'b-o');
title('Number of Newly Infected People Over Time');
xlabel('Day');
ylabel('Number of New Infections');

% Display the final number of newly infected people
final_infections = new_infections(end);
fprintf('Number of newly infected people after %d days: %d\n', n, final_infections);


%%%% 1.3
% Parameters
R0 = 2.5;
target_infections = 1e6; % 1 million

% Initialize the number of newly infected people and day counter
new_infections = 1; % Initial condition
n = 0;

% Calculate the number of days required to reach the target infections
while new_infections < target_infections
    n = n + 1;
    new_infections = R0 * new_infections;
end

fprintf('It will take %d days to reach 1 million new daily infections with R0 = %.1f.\n', n, R0);


%%%%%% 1.4
% Given covid_cases array
covid_cases = [40709, 40646, 40593, 40641, 40242, 39831, 39175];

% Initialize an array to store the results of division
division_results = zeros(1, length(covid_cases) - 1);

% Calculate the division results and store them
for i = 2:length(covid_cases)
    division_results(i - 1) = covid_cases(i) / covid_cases(i - 1);
end

% Calculate the average of the division results
average_result = mean(division_results);

% Display the division results and the average
disp('Division results:');
disp(division_results);
disp(['Average of division results: ', num2str(average_result)]);


%%%%%%%%%% 1.5
% Parameters
R0 = 2.5;
n = 20;  % Number of days

% Initialize arrays to store new daily infections and total infections
new_infections = zeros(1, n);
total_infections = zeros(1, n);

% Initial infection (one infected person on day 0)
new_infections(1) = 1;
total_infections(1) = new_infections(1);

% Calculate new daily infections and total infections
for day = 2:n
    new_infections(day) = R0 * new_infections(day - 1);
    total_infections(day) = total_infections(day - 1) + new_infections(day);
end

% Plot new daily infections
figure;
subplot(2, 1, 1);
plot(0:n-1, new_infections, 'b-o');
title('New Daily Infections (R0 = 2.5)');
xlabel('Day');
ylabel('New Infections');

% Plot total infections
subplot(2, 1, 2);
plot(0:n-1, total_infections, 'r-o');
title('Total Infections (R0 = 2.5)');
xlabel('Day');
ylabel('Total Infections');

% Display the final total infections
final_total_infections = total_infections(end);
fprintf('Total infections after %d days: %d\n', n, final_total_infections);


%1

% Initialize variables
n_max = 100; % Number of days
M = 12; % given limit
x = zeros(1, n_max+1);
y = zeros(1, n_max+1);
ak = [0.1, 0.15, 0.25, 0.26, 0.34, 0.42, 0.25, 0.2, 0.15, 0.1, 0.1, 0.1]; % coefficients
x(1) = 1; % initial infection

% Calculate new daily infections
for n = 1:n_max
    for k = 1:M
        if n - k > 0
            y(n + 1) = y(n + 1) + ak(k) * y(n - k + 1);
        end
    end
    y(n + 1) = 1 - y(n + 1);
end

% Plot the daily infections
figure;
plot(0:n_max, y);
title('Daily Infections Over Time');
xlabel('Day');
ylabel('Daily Infections');
grid on;
figure;

% Integrate to calculate total infections
total_infections = cumsum(y);

% Plot total infections
plot(0:n_max, total_infections, 'ro-');
xlabel('Day');
ylabel('Total Infections');
title('Total Infections with R0 = 2.5');

%2
%first order was exponential while multiorder was a linear graph
% it never reaches 1 million



% Coefficients for the filter
a = [0.1, 0.15, 0.25, 0.26, 0.34, 0.42, 0.25, 0.2, 0.15, 0.1, 0.1, 0.1];

% Multiplicative factor
rho = 0.25;

% Number of days to simulate
n = 100;

% Plot infections with modified coefficients
plotInfectionsWithMultiplication(a, rho, n);


function plotInfectionsWithMultiplication(a, rho, n)
    % a: Coefficients for the filter
    % rho: Multiplicative factor
    % n: Number of days to simulate
    
    % Apply the multiplication to coefficients
    a_modified = (1 - rho) * a;
    
    % Initialize the filter
    b = 1;  % Numerator coefficients (1 for integrator)
    filterOrder = length(a_modified);
    
    % Generate Kronecker delta input
    delta = zeros(1, n);
    delta(1) = 1;
    
    % Initialize output signals
    newDailyInfections = zeros(1, n);
    totalInfections = zeros(1, n);
    
    % Simulate the response without lsim
    for t = 1:n
        % Update new daily infections
        for k = 1:min(t, filterOrder)
            newDailyInfections(t) = newDailyInfections(t) + a_modified(k) * delta(t - k + 1);
        end
        
        % Update total infections
        if t > 1
            totalInfections(t) = totalInfections(t - 1) + newDailyInfections(t);
        else
            totalInfections(t) = newDailyInfections(t);
        end
    end
    
    % Plot new daily infections
    figure;
    subplot(2,1,1);
    plot(newDailyInfections);
    title('New Daily Infections (Modified Coefficients) rho=0.25');
    xlabel('Day');
    ylabel('Infections');
    
    % Plot total infections
    subplot(2,1,2);
    plot(totalInfections);
    title('Total Infections (rho=0.25)');
    xlabel('Day');
    ylabel('Total Infections');
end



%%%%%%%%% 4
% Define the parameters
R0 = 1.15;
K = 1e6;
n = 100;

% Initialize arrays to store results
y = zeros(n+1, 1);
x = zeros(n+1, 1);

% Initial condition
y(1) = 1;

% Calculate y[n] for the first-order model
for i = 2:n+1
    y(i) = 1 + R0 * y(i - 1);
end

% Calculate x[n] for the logistic model
for i = 1:n+1
    x(i) = K / (1 + (K * (R0 - 1) - R0) * R0^(-i));
end

% Plot the results
figure;
plot(0:n, y, 'b', 'LineWidth', 2, 'DisplayName', 'First-order Model');
hold on;
plot(0:n, x, 'r', 'LineWidth', 2, 'DisplayName', 'Logistic Model');
xlabel('Days');
ylabel('Total Infections');
title('Epidemic Model Comparison');
legend('Location', 'Northwest');

% Find the point of inflection using the first derivative
dy = diff(x);
[~, inflection_day] = max(dy);
inflection_infections = x(inflection_day);

% Find the point of inflection using the second derivative (zero-crossing)
d2y = diff(dy);
zero_crossing_day = find(d2y > 0, 1);

fprintf('Point of Inflection (First Derivative): Day %d, Total Infections %f\n', inflection_day, inflection_infections);
fprintf('Point of Inflection (Zero-Crossing Second Derivative): Day %d, Total Infections %f\n', zero_crossing_day, x(zero_crossing_day));